#!/usr/bin/env python

# This is an executable file that should be run from the command line.
# The command line arguments determine the type of flow field created.


## Need to add all the usual things about yourself. Name, Institute etc.


#### ADD DATE TO FILE STRUCTURE

import argparse
import time
import os
from datetime import datetime
import numpy as np

import Utils as ut
date = time.strftime("%Y_%m_%d")

ut.print_ResolventHeader()
parser = argparse.ArgumentParser(description="Run DNS with initial flow field generated by the resolvent formulation.")
parser.add_argument("-d",
                    "--Directory",
                    metavar='\b',
                    help="Output directory.",
                    required=True)
parser.add_argument("-re",
                    "--Reynolds",
                    metavar='\b',
                    help="Reynolds number to generate the flow field.",
                    required=True,
                    type=float)
parser.add_argument("-th_min",
                    "--theta_min",
                    metavar='\b',
                    help="Minimum theta for scaling amplitude. ( chi_tilde = 10.0**(theta) * chi )",
                    required=True,
                    type=float)
parser.add_argument("-th_max",
                    "--theta_max",
                    metavar='\b',
                    help="Maximum theta for scaling amplitude.",
                    required=True,
                    type=float)
parser.add_argument("-th_steps",
                    "--theta_steps",
                    metavar='\b',
                    help="Number of cases to generate. (If 1 sample to generate, the maximum theta will be used for scaling.)\n(theta_max, theta_min, theta_steps)",
                    required=True,
                    type=int)
parser.add_argument("-T0",
                    "--t_start",
                    metavar='\b',
                    help="DNS starting time unit.",
                    required=True,
                    type=float)
parser.add_argument("-T1",
                    "--t_end",
                    metavar='\b',
                    help="DNS ending time unit.",
                    required=True,
                    type=float)

args = parser.parse_args()

output_directory = args.Directory
if output_directory[-1] != '/':
    output_directory += '/'

print('\nThe process will be carried out in:')
print(output_directory, '\n')


powers = np.linspace(args.theta_max, args.theta_min, args.theta_steps)


startTime_1 = datetime.now()

directories = []
if args.theta_steps > 1:
    for i in range(0, args.theta_steps):
        command = "eMakeFlowField.py -wp KB -nd 3 -nx 36 -ny 37 -nz 36 -re " + str(args.Reynolds) + " -c 0.66666666666666667 -bf lam -d " + str(output_directory) + " -dat -asc -ff"
        command += " -i " + str(i+1)
        command += " -th " + format(powers[i], '.16f')
        os.system(command)
        d = str(i+1).zfill(3) +'_theta_' + format(powers[i], '.4f') + '/'
        directories.append(d)

else:
    command = "eMakeFlowField.py -wp KB -nd 3 -nx 36 -ny 37 -nz 36 -re " + str(args.Reynolds) + " -c 0.66666666666666667 -bf lam -d " + str(output_directory) + " -dat -asc -ff"
    command += " -th " + format(powers[0], '.16f')
    os.system(command)
    d = 'theta_' + format(powers[0], '.4f') + '/'
    directories.append(d)

endTime_1 = datetime.now() - startTime_1
# Output directory where all the cases are saved.
parent_directory = output_directory + 'Re' + str(args.Reynolds) + '/KB/' + date + "/"
# Now we loop through and convert each asc file into a binary ff file.
directories = sorted(directories)



for i in range(0, len(directories)):
    ut.print_DNSHeader()
    ut.print_DNSSubHeader()
    startTime_2 = datetime.now()

    case_directory = parent_directory + directories[i]
    print("\n" + case_directory)
    if case_directory[-1] != '/':
        case_directory += '/'


#    # Convert asc to binary
#    geomFile = case_directory + "u0.geom"
#    asciiFile = case_directory + "u0.asc"
#    binaryFile = case_directory + "u0.ff"
#    command = "ascii2field -p false -ge " + geomFile + " " + asciiFile + " " + binaryFile
#    print("Converting to binary flowfield")
#    os.system(command)


    #### Run DNS
    nonlinearity = 'skew'
    output_dir  = case_directory + 'data-' + nonlinearity + '/'
    output_file = case_directory + 'data_' + nonlinearity + '.txt'

    t_start = args.t_start
    if t_start == 0:
        initialFF = case_directory + 'u0.ff'
    else:
        initialFF = output_dir + 'u'+str(t_start) + '.000.ff'

    t_end     = args.t_end
    t_dt      = 0.001
    t_dtmin   = 0.0001
    t_dtmax   = 0.01
    t_dtsave  = 0.5

    cfl_min   = 0.01
    cfl_max   = 1.0

    reynolds = args.Reynolds
    Ubulk = 1.3333333333333333

    symFile = "sigma.asc"
    ut.write_Symms_File(case_directory, symFile, 1, ['1 1 1 1 0.5 0.0'])
    symFile = case_directory + symFile
    print('\nExecuting the following command:')

    command  = 'couette --channel'
    command += ' -T0 '      + str(t_start)
    command += ' -T1 '      + str(t_end)
    command += ' -dt '      + str(t_dt)
    command += ' -dtmin '   + str(t_dtmin)
    command += ' -dtmax '   + str(t_dtmax)
    command += ' -dT '      + str(t_dtsave)
    command += ' -CFLmin '  + str(cfl_min)
    command += ' -CFLmax '  + str(cfl_max)
    command += ' -nl '      + nonlinearity
    command += ' -symms '   + symFile
    command += ' --outdir ' + output_dir
    command += ' -R '        + str(reynolds)
    command += ' -b -U '    + str(Ubulk)
    command += ' -cfl -l2 -D -I -dv -u -Up -p'
    command += ' ' + initialFF
    command += ' >> ' + output_file
    print(command + "\n")
    os.system(command)

    endTime_2 = datetime.now() - startTime_2

    timeFileName = case_directory + "time.log"
    timeFile = open(timeFileName, "w")
    timeFile.write("\n\nDNS time for " + case_directory + "\n\n")
    timeFile.write(str(endTime_2) + "\n\n")
    timeFile.close()


    #### Plot Convergence    
    command = "ePlotConvergenceDNS.py"
    command+= " -T0 " + str(t_start)
    command+= " -T1 " + str(t_end)
    command+= " -f "  + str(output_file)
    print(command + "\n")
    os.system(command)


    #### Plot Recurrence 
    rec_dir = output_dir
    rec_T0 = int(0.7*t_end)
    rec_T1 = int(0.9*t_end)
    rec_Tmax = int(0.1*t_end)
    rec_kx = 18 # half of Nx
    rec_kz = 18 # half of Nz

    command = "ePlotRecurrence.py"
    command+= " -d "  + rec_dir
    command+= " -T0 " + str(rec_T0)
    command+= " -T1 " + str(rec_T1)
    command+= " -t "  + str(rec_Tmax)
    command+= " -kx " + str(rec_kx)
    command+= " -kz " + str(rec_kz)
    print(command + "\n")
    os.system(command)
    
    ut.print_EndMessage()


ut.print_EndMessage()

